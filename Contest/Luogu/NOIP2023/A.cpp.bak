#include <bits/stdc++.h>

#pragma region
namespace FastIO {/*{{{*/
static constexpr signed bufsize = 1 << 20;
struct is {
  char inbuf[bufsize], *p1 = inbuf, *p2 = inbuf;
  inline char gc() {
    if (p1 == p2) p1 = inbuf, p2 = inbuf + fread(inbuf, 1, bufsize, stdin);
    return p1 == p2 ? EOF : *p1++;
  }
  template <typename T>
  inline void read(T &x) {
    x = 0;
    T f = 1;
    char c = gc();
    while (c < '0' || c > '9') f = ( c == '-' ? -f : f), c = gc();
    while ('0' <= c && c <= '9') x = x * 10 + c - '0', c = gc();
    x *= f;
  }
  inline void read(char *s) {
    char c = gc();
    while (c == ' ' || c == '\n' || c == '\r') c = gc();
    while (c != ' ' && c != '\n' && c != '\r') *s++ = c, c = gc();
  }
  inline void read(char &c) {
    c = gc();
    while (c == ' ' || c == '\n' || c == '\r') c = gc();
  }
  inline void read(std::string &s) {
    std::string().swap(s);
    char c = gc();
    while (c == ' ' || c == '\n' || c == '\r') c = gc();
    while (c != ' ' && c != '\n' && c != '\r') s += c, c = gc();
  }
  template <typename T = int>
  inline T read() {
    T res;
    read(res);
    return res;
  }
  template <typename T>
  is &operator>>(T &rhs) { return read(rhs), *this; }
  is &operator>>(char *rhs) { return read(rhs), *this; }
};
struct os {
  char outbuf[bufsize], *pp = outbuf;
  ~os() { flush(); }
  inline void pc(const char &c) {
    if (pp - outbuf == bufsize) fwrite(outbuf, 1, bufsize, stdout), pp = outbuf;
    *pp++ = c;
  }
  template <typename T>
  inline void print(T x) {
    if (x < 0) x = -x, pc('-');
    static T sta[35];
    T top = 0;
    do sta[top++] = x % 10, x /= 10; while (x);
    while (top) pc(sta[--top] + '0');
  }
  inline void print(const char *s) { for (; *s; ++s) pc(*s); }
  inline void print(char *s) { for (; *s; ++s) pc(*s); }
  inline void print(const std::string &s) { for (const auto &c : s) pc(c); }
  inline void print(const char &c) { pc(c); }
  inline void flush() { fwrite(outbuf, 1, pp - outbuf, stdout), pp = outbuf; }
  template <typename T>
  os &operator<<(const T &rhs) { return print(rhs), *this; }
};
}  // namespace FastIO
FastIO::is fin;
FastIO::os fout;/*}}}*/
#pragma endregion

using i64 = int64_t;
using pii = std::pair<int, int>;

constexpr int N = 1e4 + 50, mod = 998244353;
int n, w, p[N];
std::map<int, int> fac[N];
inline i64 fastPow(i64 base, i64 exp, i64 mod) {
  i64 res = 1;
  for (; exp; exp >>= 1) {
    if (exp & 1) (res *= base) %= mod;
    (base *= base) %= mod;
  }
  return res;
}
inline i64 inv(i64 u) { return fastPow(u, mod - 2, mod); }
void solve() {
  fin >> n >> w;
  for (int i = 1; i <= n; i++) fin >> p[i];
  p[0] = w;
  i64 ans = 1;
  for (int i = 0; i <= n; i++) {
    int cpy = p[i];
    for (int j = 2; j * j <= cpy; j++) {
      if (cpy % j == 0) {
        fac[i][j] = 0;
        while (cpy % j == 0) cpy /= j, fac[i][j]++;
        if (i) ans = ans * (fac[i][j] + 1) % mod;
      }
    }
    if (cpy != 1) fac[i][cpy] = 1;
    if (cpy != 1 && i) ans = 2 * ans % mod;
  }
  // fout << ans << "\n";
  for (auto [f, c] : fac[0]) {
    std::vector<int> t;
    for (int i = 1; i <= n; i++) {
      if (!fac[i].count(f)) t.emplace_back(0);
      else t.emplace_back(fac[i][f]);
    }
    std::sort(t.begin(), t.end(), std::greater<>());
    for (auto i : t) ans = ans * inv(i + 1) % mod;
    int mx = t[0], rst = c;
    size_t p = 0;
    while (p < t.size() && t[p] == mx) p++;
    std::sort(t.begin() + p, t.end());
    for (; p < t.size() && rst > 0; p++) {
      int d = mx - t[p];
      if (rst >= d) rst -= d, t[p] = mx;
      else t[p] += rst, rst = 0;
    }
    if (rst > 0) {
      int avg = rst / t.size();
      p = 0;
      while (p < t.size() && rst > 0) t[p] += avg, p++, rst -= avg;
      p = 0;
      while (p < t.size() && rst > 0) t[p]++, p++, rst--;
    }
    for (auto i : t) ans = ans * (i + 1) % mod;
  }
  fout << ans << "\n";
}

int main() {
  freopen("plant/plant3.in", "r", stdin);
  int t = 1;
  // fin >> t;
  while (t--) solve();
  return 0;
}
